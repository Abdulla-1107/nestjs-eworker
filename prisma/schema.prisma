// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  phone     String
  password  String
  inn       String?
  bank      String?
  mfo       String?
  salary    Float?
  account   String?
  address   String?
  role      UserRole @default(USER_FIZ)
  createdAt DateTime @default(now())
  regionId  String
  Region    Region   @relation(fields: [regionId], references: [id])
  Order     Order[]
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
  USER_FIZ
  USER_YUR
}

model Region {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  User      User[]
}

model Capacity {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  Tool      Tool[]
}

model Brand {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  Tool      Tool[]
}

model Size {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  Tool      Tool[]
}

model Level {
  id               String             @id @default(uuid())
  name_uz          String
  name_ru          String
  name_en          String
  createdAt        DateTime           @default(now())
  MasterProfession MasterProfession[]
  professionLevel  professionLevel[]
}

model GeneralInfo {
  id          String   @id @default(uuid())
  phone       String
  email       String
  address     String?
  telegram    String?
  instagram   String?
  description String?
  createdAt   DateTime @default(now())
}

model Tool {
  id             String           @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  desc_uz        String
  desc_ru        String
  desc_en        String
  image          String
  price          Int
  quantity       Int
  code           Int?
  isActive       Boolean?
  createdAt      DateTime         @default(now())
  brandId        String
  Brand          Brand            @relation(fields: [brandId], references: [id])
  capacityId     String
  Capacity       Capacity         @relation(fields: [capacityId], references: [id])
  sizeId         String
  Size           Size             @relation(fields: [sizeId], references: [id])
  professionTool professionTool[]
}

model Master {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  phone            String
  birthYear        Int
  isActive         Boolean?
  image            String?
  passportImg      String?
  about            String
  createdAt        DateTime           @default(now())
  MasterProfession MasterProfession[]
}

model Profession {
  id               String             @id @default(uuid())
  name_uz          String
  name_ru          String
  name_en          String
  image            String
  isActive         Boolean
  MasterProfession MasterProfession[]
  professionTool   professionTool[]
  professionLevel  professionLevel[]
}

model MasterProfession {
  id              String     @id @default(uuid())
  professionId    String
  Pofession       Profession @relation(fields: [professionId], references: [id])
  masterId        String
  Master          Master     @relation(fields: [masterId], references: [id])
  levelId         String
  Level           Level      @relation(fields: [levelId], references: [id])
  minWorkingHours Int
  priceHourly     Decimal
  priceDaily      Decimal
  experience      Decimal
}

model professionTool {
  id           String     @id @default(uuid())
  professionId String
  Profession   Profession @relation(fields: [professionId], references: [id])
  toolId       String
  Tool         Tool       @relation(fields: [toolId], references: [id])
}

model professionLevel {
  id              String     @id @default(uuid())
  professionId    String
  Profession      Profession @relation(fields: [professionId], references: [id])
  levelId         String
  Level           Level      @relation(fields: [levelId], references: [id])
  minWorkingHours Int
  priceHourly     Decimal
  priceDaily      Decimal
}

model Order {
  id              String   @id @default(uuid())
  userId          String
  User            User     @relation(fields: [userId], references: [id])
  address         String
  latitude        String
  longitude       String
  date            DateTime @default(now())
  totalPrice      Decimal
  paymentType     String
  withDelivery    Boolean
  status          String
  deliveryComment String?
  createdAt       DateTime @default(now())
}
