// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  fullName  String
  phone     String
  password  String
  role      UserRole  @default(USER_FIZ)
  createdAt DateTime  @default(now())
  regionId  String
  Region    Region    @relation(fields: [regionId], references: [id], onDelete: Cascade)
  Order     Order[]
  Basket    Basket[]
  Company   Company[]
  Session   Session[]
  Comment   Comment[]
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  refreshToken String
  ip           String?
  device       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
}

model Company {
  id        String   @id @default(uuid())
  name      String
  inn       String
  account   String
  address   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  bank      String?
  mfo       String?
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
  USER_FIZ
  USER_YUR
}

model Region {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  User      User[]
}

model Capacity {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  Tool      Tool[]
}

model Brand {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  Tool      Tool[]
}

model Size {
  id        String   @id @default(uuid())
  name_uz   String
  name_ru   String
  name_en   String
  createdAt DateTime @default(now())
  Tool      Tool[]
}

model Level {
  id               String             @id @default(uuid())
  name_uz          String
  name_ru          String
  name_en          String
  createdAt        DateTime           @default(now())
  MasterProfession MasterProfession[]
  professionLevel  professionLevel[]
  Basket           Basket[]
  orderProduct     orderProduct[]
}

model GeneralInfo {
  id          String   @id @default(uuid())
  phone       String
  email       String
  address     String?
  telegram    String?
  instagram   String?
  description String?
  createdAt   DateTime @default(now())
}

model Tool {
  id             String           @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  desc_uz        String
  desc_ru        String
  desc_en        String
  image          String
  price          Int
  quantity       Int
  code           Int?
  isActive       Boolean?
  createdAt      DateTime         @default(now())
  brandId        String?
  Brand          Brand?           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  capacityId     String?
  Capacity       Capacity?        @relation(fields: [capacityId], references: [id], onDelete: Cascade)
  sizeId         String?
  Size           Size?            @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  professionTool professionTool[]
  Basket         Basket[]
  orderProduct   orderProduct[]
}

model Master {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  phone            String
  birthYear        Int
  isActive         Boolean?
  image            String?
  passportImg      String?
  about            String
  createdAt        DateTime           @default(now())
  MasterProfession MasterProfession[]
  OrderMaster      OrderMaster[]
  MasterRating     MasterRating[]
}

model Profession {
  id               String             @id @default(uuid())
  name_uz          String
  name_ru          String
  name_en          String
  image            String
  isActive         Boolean
  MasterProfession MasterProfession[]
  professionTool   professionTool[]
  professionLevel  professionLevel[]
  Basket           Basket[]
  orderProduct     orderProduct[]
  createdAt        DateTime           @default(now())
}

model MasterProfession {
  id              String     @id @default(uuid())
  professionId    String
  Pofession       Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)
  masterId        String
  Master          Master     @relation(fields: [masterId], references: [id], onDelete: Cascade)
  levelId         String
  Level           Level      @relation(fields: [levelId], references: [id], onDelete: Cascade)
  minWorkingHours Int
  priceHourly     Decimal
  priceDaily      Decimal
  experience      Decimal
}

model professionTool {
  id           String      @id @default(uuid())
  professionId String?
  Profession   Profession? @relation(fields: [professionId], references: [id], onDelete: Cascade)
  toolId       String?
  Tool         Tool?       @relation(fields: [toolId], references: [id], onDelete: Cascade)
}

model professionLevel {
  id              String     @id @default(uuid())
  professionId    String
  Profession      Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)
  levelId         String
  Level           Level      @relation(fields: [levelId], references: [id], onDelete: Cascade)
  minWorkingHours Int
  priceHourly     Decimal
  priceDaily      Decimal
}

model Order {
  id              String         @id @default(uuid())
  userId          String
  User            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  address         String
  latitude        String
  longitude       String
  date            DateTime       @default(now())
  totalPrice      Decimal
  paymentType     String
  withDelivery    Boolean
  status          String
  deliveryComment String?
  createdAt       DateTime       @default(now())
  OrderMaster     OrderMaster[]
  orderProduct    orderProduct[]
  Comment         Comment[]
}

model OrderMaster {
  id       String @id @default(uuid())
  orderId  String
  Order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  masterId String
  Master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)
}

model Basket {
  id           String      @id @default(uuid())
  userId       String?
  User         User?       @relation(fields: [userId], references: [id])
  professionId String?
  Profession   Profession? @relation(fields: [professionId], references: [id], onDelete: Cascade)
  toolId       String?
  Tool         Tool?       @relation(fields: [toolId], references: [id], onDelete: Cascade)
  levelId      String?
  Level        Level?      @relation(fields: [levelId], references: [id], onDelete: Cascade)
  count        Int
  workingTime  Int?
  totalPrice   Decimal
  timeUnit     String
}

model orderProduct {
  id           String      @id @default(uuid())
  orderId      String
  Order        Order       @relation(fields: [orderId], references: [id])
  professionId String?
  Profession   Profession? @relation(fields: [professionId], references: [id], onDelete: Cascade)
  toolId       String?
  Tool         Tool?       @relation(fields: [toolId], references: [id])
  levelId      String?
  Level        Level?      @relation(fields: [levelId], references: [id])
  workingTime  Int?
  price        Decimal
  count        Int
  timeUnit     String?
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  surName   String
  phone     String
  address   String
  message   String
  createdAt DateTime @default(now())
}

model Showcase {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  desc_uz String
  desc_ru String
  desc_en String
  image   String
  link    String?
}

model Partners {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  image   String
}

model faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Comment {
  id        String         @id @default(uuid())
  message   String
  order     Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
  ratings   MasterRating[]
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
}

model MasterRating {
  id        String  @id @default(uuid())
  master    Master? @relation(fields: [masterId], references: [id], onDelete: Cascade)
  masterId  String?
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  star      Float
}
